# Development Dockerfile for TYFOR project
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_APP=app.py
ENV FLASK_ENV=development
ENV PYTHONPATH=/app/backend

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgeos-dev \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for frontend development
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Create app directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p backend/static/graphs \
    backend/static/team-logos \
    backend/uploads/videos \
    backend/uploads/processed_videos \
    data/models \
    data/processed_data \
    data/raw_data

# Copy and install backend dependencies
COPY backend/requirements.txt ./backend/
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r backend/requirements.txt

# Copy and install frontend dependencies
COPY frontend/package*.json ./frontend/
WORKDIR /app/frontend
RUN npm install

# Set working directory back to app
WORKDIR /app

# Copy source code (will be overridden by volume mounts in development)
COPY backend/ ./backend/
COPY frontend/ ./frontend/
COPY data/ ./data/

# Copy additional files
COPY requirements.txt ./
COPY init_db.sh ./

# Make init script executable
RUN chmod +x init_db.sh

# Set working directory to backend
WORKDIR /app/backend

# Create uploads directory with proper permissions
RUN chmod -R 755 uploads/ static/

# Expose ports
EXPOSE 5056 3000

# Development startup script
COPY <<EOF /app/start-dev.sh
#!/bin/bash
set -e

echo "🔄 Starting development environment..."

# Wait for database
echo "⏳ Waiting for database..."
while ! pg_isready -h db -p 5432 -U postgres; do
  echo "Database is unavailable - sleeping"
  sleep 2
done

echo "✅ Database is ready!"

# Initialize database and models
echo "🔧 Initializing database..."
python3 -c "
import os
import sys
sys.path.append('/app/backend')
try:
    # Import models in dependency order
    import models.user
    import models.league
    import models.football_team
    import models.footballer
    import models.notification
    import models.player
    import models.match
    import models.performance
    import models.physical
    import models.endurance
    import models.conditional
    import models.match_analysis
    
    from utils.database import Database
    from sqlalchemy import create_engine
    from models import Base
    
    # Create database tables
    engine = create_engine(os.getenv('DATABASE_URL'))
    Base.metadata.create_all(engine)
    
    print('✅ Database tables created successfully')
    
except Exception as e:
    print(f'❌ Database initialization failed: {e}')
    import traceback
    traceback.print_exc()
"

# Start frontend development server in background
echo "🚀 Starting frontend development server..."
cd /app/frontend && npm start &

# Start backend development server
echo "🚀 Starting backend development server..."
cd /app/backend && python app.py
EOF

RUN chmod +x /app/start-dev.sh

# Run development servers
CMD ["/app/start-dev.sh"]
